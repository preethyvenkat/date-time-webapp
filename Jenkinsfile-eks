pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        TF_DIR     = 'infrastructure/terraform-eks-cluster'
    }

    stages {
        stage('Terraform Init and Plan') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([usernamePassword(
                        credentialsId: 'aws-creds',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    )]) {
                        withEnv([
                            "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID",
                            "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
                        ]) {
                            sh '''
                                terraform init
                                terraform plan -out=tfplan
                                echo "‚úÖ Terraform plan created"
                            '''
                        }
                    }
                }
            }
        }

        stage('Terraform Apply (EKS)') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([usernamePassword(
                        credentialsId: 'aws-creds',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    )]) {
                        withEnv([
                            "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID",
                            "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
                        ]) {
                            sh '''
                                terraform apply -auto-approve tfplan
                                echo "‚úÖ Terraform applied successfully"
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ EKS infrastructure applied successfully!'
            slackSend (
                color: '#36a64f',
                message: "*‚úÖ INFRA SUCCESS*: Terraform EKS applied for `${env.JOB_NAME}` #${env.BUILD_NUMBER} üöÄ"
            )
        }
        failure {
            echo '‚ùå Pipeline failed. Triggering terraform destroy.'

            // Terraform destroy (wrap in try-catch to avoid pipeline crash if destroy fails)
            script {
                try {
                    dir('infrastructure/terraform-eks-cluster') {
                        withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            sh '''
                                export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                                export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                                export AWS_REGION=us-east-1

                                terraform init -input=false
                                terraform destroy -auto-approve
                            '''
                        }
                    }
                } catch (err) {
                    echo "‚ö†Ô∏è Terraform destroy failed: ${err}"
                }
            }
            slackSend (
                color: '#0000FF',
                message: "*‚ùå INFRA FAILURE*: Terraform failed for `${env.JOB_NAME}` #${env.BUILD_NUMBER} üèóÔ∏è"
            )
        }
        cleanup {
            echo 'üßπ Cleaning Infra workspace...'
            deleteDir()
        }
    }
}