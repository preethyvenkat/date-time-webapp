pipeline {
    agent any

    environment {
        AWS_REGION   = 'us-east-1'
        ECR_REPO     = '141409473062.dkr.ecr.us-east-1.amazonaws.com/date-time-webapp'
        IMAGE_TAG    = "v${BUILD_NUMBER}"
        FULL_IMAGE   = "${ECR_REPO}:${IMAGE_TAG}"
        MANIFEST_REPO = 'git@github.com:preethyvenkat/date-time-webapp.git'
        TF_DIR       = 'infrastructure/terraform-eks-cluster'
    }

    stages {

        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "üöß Building Docker image: $FULL_IMAGE"
                    docker build -t $FULL_IMAGE ./app
                '''
            }
        }

        stage('Login to Amazon ECR') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'aws-creds',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    sh '''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        echo "[default]" > ~/.aws/config
                        echo "region=$AWS_REGION" >> ~/.aws/config

                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                    '''
                }
            }
        }

        stage('Create ECR Repository if not exists') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'aws-creds',
                    usernameVariable: 'AWS_ACCESS_KEY_ID',
                    passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                )]) {
                    sh '''
                        aws ecr describe-repositories --repository-names date-time-webapp --region $AWS_REGION || \
                        aws ecr create-repository --repository-name date-time-webapp --region $AWS_REGION
                        echo "‚úÖ ECR repository is ready"
                    '''
                }
            }
        }

        stage('Tag Docker Image') {
            steps {
                sh '''
                    echo "üîñ Tagging Docker image: $FULL_IMAGE"
                    docker tag $FULL_IMAGE $ECR_REPO:$IMAGE_TAG
                '''
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                sh 'docker push $FULL_IMAGE'
            }
        }

        stage('Terraform Init and Plan') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([usernamePassword(
                        credentialsId: 'aws-creds',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    )]) {
                        withEnv([
                            "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID",
                            "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
                        ]) {
                            sh '''
                                terraform init
                                terraform plan -out=tfplan
                                echo "‚úÖ Terraform plan created"
                            '''
                        }
                    }
                }
            }
        }

        stage('Terraform Apply (EKS)') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([usernamePassword(
                        credentialsId: 'aws-creds',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    )]) {
                        withEnv([
                            "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID",
                            "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
                        ]) {
                            sh '''
                                terraform apply -auto-approve tfplan
                                echo "‚úÖ Terraform applied successfully"
                            '''
                        }
                    }
                }
            }
        }

    }
    post {
    success {
        echo 'üéâ Pipeline completed successfully!'
        slackSend (
            color: '#36a64f', // green
            message: "*‚úÖ SUCCESS*: The pipeline `${env.JOB_NAME}` #${env.BUILD_NUMBER} completed successfully. üöÄ"
        )
    }

    failure {
        echo '‚ùå Pipeline failed.'

        // Send separate Slack alerts for CI and Infra stages (manually marked)
        script {
            def ciFailed = currentBuild.rawBuild.getLog().any { it.contains("CI_STAGE_FAILED") }
            def infraFailed = currentBuild.rawBuild.getLog().any { it.contains("INFRA_STAGE_FAILED") }

            if (ciFailed) {
                slackSend (
                    color: '#FF0000', // red
                    message: "*‚ùå CI FAILURE*: Build `${env.BUILD_NUMBER}` failed during the CI stage. üîß"
                )
            }

            if (infraFailed) {
                slackSend (
                    color: '#0000FF', // blue
                    message: "*‚ùå INFRA FAILURE*: Build `${env.BUILD_NUMBER}` failed during the Infrastructure stage. üèóÔ∏è"
                )
            }

            // Fallback if we don't know which stage failed
            if (!ciFailed && !infraFailed) {
                slackSend (
                    color: '#FF0000',
                    message: "*‚ùå FAILURE*: The pipeline `${env.JOB_NAME}` #${env.BUILD_NUMBER} failed. ‚ùó"
                )
            }
        }
    }

    cleanup {
        echo 'üßπ Cleaning up workspace...'
        deleteDir()
    }
}
