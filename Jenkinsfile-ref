pipeline {
    agent any

    environment {
        AWS_REGION        = 'us-east-1'
        EKS_CLUSTER       = 'date-time-webapp-cluster'
        ECR_REPO          = '141409473062.dkr.ecr.us-east-1.amazonaws.com/date-time-webapp'
        IMAGE_TAG         = "v${BUILD_NUMBER}"
        FULL_IMAGE        = "${ECR_REPO}:${IMAGE_TAG}"
        MANIFEST_REPO     = 'git@github.com:preethyvenkat/date-time-webapp.git'
        TF_DIR            = 'infrastructure/terraform-eks-cluster'
        ARGO_NAMESPACE    = 'argocd'
        ARGO_APP_NAME     = 'date-time-webapp'
        SSH_CREDENTIALS_ID = 'argo-ssh-key'    // Jenkins SSH private key credential for Argo CD Git access
        AWS_CREDENTIALS_ID = 'aws-creds'       // Jenkins AWS credentials ID
        SLACK_CHANNEL     = '#your-slack-channel' // Replace with your Slack channel
    }

    stages {
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: AWS_CREDENTIALS_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        echo "üöß Building Docker image: $FULL_IMAGE"
                        docker build -t $FULL_IMAGE ./app

                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        echo "[default]" > ~/.aws/config
                        echo "region=$AWS_REGION" >> ~/.aws/config

                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO

                        aws ecr describe-repositories --repository-names date-time-webapp --region $AWS_REGION || \
                        aws ecr create-repository --repository-name date-time-webapp --region $AWS_REGION

                        echo "üîñ Tagging Docker image: $FULL_IMAGE"
                        docker tag $FULL_IMAGE $ECR_REPO:$IMAGE_TAG

                        echo "üöÄ Pushing Docker image to ECR"
                        docker push $FULL_IMAGE
                    '''
                }
            }
        }

        stage('Terraform Provision EKS') {
            steps {
                dir("${TF_DIR}") {
                    withCredentials([usernamePassword(credentialsId: AWS_CREDENTIALS_ID, usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        withEnv([
                            "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID",
                            "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY"
                        ]) {
                            sh '''
                                terraform init
                                terraform plan -out=tfplan
                                terraform apply -auto-approve tfplan
                            '''
                        }
                    }
                }
            }
        }

        stage('Install Argo CD and Configure SSH Access') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: SSH_CREDENTIALS_ID, keyFileVariable: 'SSH_KEY')]) {
                    sh '''
                        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

                        kubectl get namespace $ARGO_NAMESPACE || kubectl create namespace $ARGO_NAMESPACE

                        if ! kubectl get pods -n $ARGO_NAMESPACE | grep argocd-server > /dev/null; then
                            kubectl apply -n $ARGO_NAMESPACE -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                            kubectl rollout status deployment/argocd-server -n $ARGO_NAMESPACE --timeout=300s
                        fi

                        # Replace Argo CD repo server ssh key secret with our Jenkins SSH key
                        kubectl -n $ARGO_NAMESPACE delete secret argocd-ssh-key || true
                        kubectl -n $ARGO_NAMESPACE create secret generic argocd-ssh-key --from-file=ssh-privatekey=$SSH_KEY --type=kubernetes.io/ssh-auth

                        # Patch the argocd-repo-server deployment to use this ssh key secret as a volume
                        kubectl -n $ARGO_NAMESPACE patch deployment argocd-repo-server -p '
                        {
                          "spec": {
                            "template": {
                              "spec": {
                                "volumes": [
                                  {
                                    "name": "ssh-key-secret",
                                    "secret": {
                                      "secretName": "argocd-ssh-key"
                                    }
                                  }
                                ],
                                "containers": [
                                  {
                                    "name": "argocd-repo-server",
                                    "volumeMounts": [
                                      {
                                        "name": "ssh-key-secret",
                                        "mountPath": "/app/config/ssh"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        }'

                        kubectl -n $ARGO_NAMESPACE rollout restart deployment argocd-repo-server

                        # Install Argo CD CLI if missing
                        if ! command -v argocd &> /dev/null; then
                            echo "Installing Argo CD CLI..."
                            curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                            chmod +x /usr/local/bin/argocd
                        fi
                    '''
                }
            }
        }

        stage('Create or Update Argo CD Application') {
            steps {
                sh '''
                    ARGCD_SERVER=argocd-server.$ARGO_NAMESPACE.svc.cluster.local:443

                    # Login to Argo CD (using admin password from secret)
                    argocd login $ARGCD_SERVER --insecure --username admin --password $(kubectl -n $ARGO_NAMESPACE get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)

                    if argocd app get $ARGO_APP_NAME > /dev/null 2>&1; then
                        echo "Updating Argo CD app $ARGO_APP_NAME"
                        argocd app set $ARGO_APP_NAME --repo $MANIFEST_REPO --path k8s --dest-server https://kubernetes.default.svc --dest-namespace default
                        argocd app sync $ARGO_APP_NAME
                    else
                        echo "Creating Argo CD app $ARGO_APP_NAME"
                        argocd app create $ARGO_APP_NAME \
                            --repo $MANIFEST_REPO \
                            --path k8s \
                            --dest-server https://kubernetes.default.svc \
                            --dest-namespace default \
                            --sync-policy automated
                    fi

                    argocd app wait $ARGO_APP_NAME --health --timeout 300
                '''
            }
        }
    }

    post {
        success {
            echo 'üéâ Pipeline completed successfully!'
            slackSend(channel: SLACK_CHANNEL, color: '#36a64f', message: "*‚úÖ SUCCESS*: Pipeline `${env.JOB_NAME}` #${env.BUILD_NUMBER} completed successfully. üöÄ")
        }
        failure {
            echo '‚ùå Pipeline failed.'
            slackSend(channel: SLACK_CHANNEL, color: '#FF0000', message: "*‚ùå FAILURE*: Pipeline `${env.JOB_NAME}` #${env.BUILD_NUMBER} failed. ‚ùó")
        }
        cleanup {
            echo 'üßπ Cleaning up workspace...'
            deleteDir()
        }
    }
}
